// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Dialog$BtsCore from "../../material-ui/core/Dialog/Dialog.bs.js";
import * as DialogFull$BtsCore from "../../material-ui/core/Dialog/DialogFull.bs.js";
import * as DialogTitle$BtsCore from "../../material-ui/core/Dialog/DialogTitle.bs.js";
import * as DialogActions$BtsCore from "../../material-ui/core/Dialog/DialogActions.bs.js";
import * as DialogContent$BtsCore from "../../material-ui/core/Dialog/DialogContent.bs.js";
import * as DialogContentText$BtsCore from "../../material-ui/core/Dialog/DialogContentText.bs.js";
import * as DialogAnimationRight$BtsCore from "../../material-ui/core/Dialog/DialogAnimationRight.bs.js";
import * as DialogAnimationBottom$BtsCore from "../../material-ui/core/Dialog/DialogAnimationBottom.bs.js";

function reducer(state, action) {
  switch (action) {
    case /* ShowDialog */0 :
        return {
                showDialog: !state.showDialog,
                showAnimationBottom: state.showAnimationBottom,
                showAnimationRight: state.showAnimationRight,
                showFull: state.showFull
              };
    case /* ShowAnimationBottom */1 :
        return {
                showDialog: state.showDialog,
                showAnimationBottom: !state.showAnimationBottom,
                showAnimationRight: state.showAnimationRight,
                showFull: state.showFull
              };
    case /* ShowAnimationRight */2 :
        return {
                showDialog: state.showDialog,
                showAnimationBottom: state.showAnimationBottom,
                showAnimationRight: !state.showAnimationRight,
                showFull: state.showFull
              };
    case /* ShowFull */3 :
        return {
                showDialog: state.showDialog,
                showAnimationBottom: state.showAnimationBottom,
                showAnimationRight: state.showAnimationRight,
                showFull: !state.showFull
              };
    
  }
}

var initialState = {
  showDialog: false,
  showAnimationBottom: false,
  showAnimationRight: false,
  showFull: false
};

function Dialogs(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var clickDialogShow = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowDialog */0);
        }));
  var clickAnimationBottomShow = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowAnimationBottom */1);
        }));
  return React.createElement("div", undefined, React.createElement("div", {
                  onClick: clickDialogShow
                }, state.showDialog ? "dialog" : "123"), React.createElement("div", {
                  onClick: clickAnimationBottomShow
                }, state.showAnimationBottom ? "animationBottom" : "123"), React.createElement("div", {
                  onClick: (function (param) {
                      return Curry._1(dispatch, /* ShowAnimationRight */2);
                    })
                }, state.showAnimationRight ? "animationRight" : "123"), React.createElement("div", {
                  onClick: (function (param) {
                      return Curry._1(dispatch, /* ShowFull */3);
                    })
                }, state.showFull ? "full" : "123"), React.createElement(Dialog$BtsCore.make, {
                  showDialog: state.showDialog,
                  children: null
                }, React.createElement(DialogTitle$BtsCore.make, {
                      children: "Use Google's location service?"
                    }), React.createElement(DialogContent$BtsCore.make, {
                      children: React.createElement(DialogContentText$BtsCore.make, {
                            children: "Let Google help apps determine location. This means sending anonymous location data to\n        Google, even when no apps are running."
                          })
                    }), React.createElement(DialogActions$BtsCore.make, {
                      children: "123"
                    })), React.createElement(DialogAnimationBottom$BtsCore.make, {
                  showAnimation: state.showAnimationBottom,
                  children: null
                }, React.createElement(DialogTitle$BtsCore.make, {
                      children: "Use Google's location service?"
                    }), React.createElement(DialogContent$BtsCore.make, {
                      children: React.createElement(DialogContentText$BtsCore.make, {
                            children: "Let Google help apps determine location. This means sending anonymous location data to\n        Google, even when no apps are running."
                          })
                    }), React.createElement(DialogActions$BtsCore.make, {
                      children: "123"
                    })), React.createElement(DialogAnimationRight$BtsCore.make, {
                  showAnimation: state.showAnimationRight,
                  children: null
                }, React.createElement(DialogTitle$BtsCore.make, {
                      children: "Use Google's location service?"
                    }), React.createElement(DialogContent$BtsCore.make, {
                      children: React.createElement(DialogContentText$BtsCore.make, {
                            children: "Let Google help apps determine location. This means sending anonymous location data to\n        Google, even when no apps are running."
                          })
                    }), React.createElement(DialogActions$BtsCore.make, {
                      children: "123"
                    })), React.createElement(DialogFull$BtsCore.make, {
                  showAnimation: state.showFull,
                  children: null
                }, React.createElement(DialogTitle$BtsCore.make, {
                      children: "Use Google's location service?"
                    }), React.createElement(DialogContent$BtsCore.make, {
                      children: React.createElement(DialogContentText$BtsCore.make, {
                            children: "Let Google help apps determine location. This means sending anonymous location data to\n        Google, even when no apps are running."
                          })
                    }), React.createElement(DialogActions$BtsCore.make, {
                      children: "123"
                    })));
}

var make = Dialogs;

export {
  reducer ,
  initialState ,
  make ,
  
}
/* react Not a pure module */
