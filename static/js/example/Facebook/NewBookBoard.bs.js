// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReactIntl from "react-intl";
import * as Tab$BtsCore from "../../material-ui/core/Tabs/Tab.bs.js";
import * as Chip$BtsCore from "../../material-ui/core/Chip/Chip.bs.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Path$BtsCore from "../../features/Path.bs.js";
import * as Tabs$BtsCore from "../../material-ui/core/Tabs/Tabs.bs.js";
import * as Badge$BtsCore from "../../material-ui/core/Badge/Badge.bs.js";
import * as Basic$BtsCore from "../../setting/Basic.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as AppBar$BtsCore from "../../material-ui/core/AppBar/AppBar.bs.js";
import * as OutSide$BtsCore from "../../styles/OutSide/OutSide.bs.js";
import * as Tooltip$BtsCore from "../../material-ui/core/Tooltip/Tooltip.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as Typography$BtsCore from "../../material-ui/core/Typography/Typography.bs.js";
import * as NewBookUser$BtsCore from "./NewBookUser.bs.js";
import * as NewBookBadge$BtsCore from "./NewBookBadge.bs.js";
import * as ObjectFormat$BtsCore from "../../controls/ObjectFormat.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as NewBookCreate$BtsCore from "./NewBookCreate.bs.js";
import * as NewBookRecord$BtsCore from "./NewBookRecord.bs.js";
import * as TextFieldOutline$BtsCore from "../../material-ui/core/TextField/TextFieldOutline.bs.js";

((require('../../../scss/example/Facebook/newBookBoard.scss')));

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* ShowRecord */0 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: !state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ShowCreate */1 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: !state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ShowBadge */2 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: !state.showBadge,
                  beforeLoad: true,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ShowItemUser */3 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: !state.showItemUser,
                  checked: state.checked
                };
      case /* SwitchChecked */4 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: !state.checked
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SettingFormLoad */0 :
          return {
                  formLoad: !state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: action[0],
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: action[1],
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* SettingFormWidth */1 :
          return {
                  formLoad: state.formLoad,
                  formWidth: action[0],
                  formHeight: action[1],
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* SettingBadge */2 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: action[0],
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ChangeField */3 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: action[0],
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ClickRecordItems */4 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: action[0],
                  recorditems: action[1],
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: !state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* SettingPath */5 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: action[0],
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ClickItemTab */6 :
          var index = action[0];
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: List.mapi((function (i, tabtitem) {
                          return {
                                  showTabt: index === i,
                                  tabImage: tabtitem.tabImage,
                                  tabPath: tabtitem.tabPath
                                };
                        }), state.tabitems),
                  index: index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: state.beforeLoad,
                  showItemBadge: state.showItemBadge,
                  badgeitems: state.badgeitems,
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      case /* ClickBadgeItems */7 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  value: state.value,
                  showRecord: state.showRecord,
                  showItemRecord: state.showItemRecord,
                  recorditems: state.recorditems,
                  menuPath: state.menuPath,
                  tabitems: state.tabitems,
                  index: state.index,
                  showCreate: state.showCreate,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  beforeLoad: !state.beforeLoad,
                  showItemBadge: action[0],
                  badgeitems: action[1],
                  showItemUser: state.showItemUser,
                  checked: state.checked
                };
      
    }
  }
}

var initialState_recorditems = [];

var initialState_tabitems = /* :: */[
  {
    showTabt: true,
    tabImage: Icons$BtsCore.homeBlack,
    tabPath: Path$BtsCore.homePath
  },
  /* :: */[
    {
      showTabt: false,
      tabImage: Icons$BtsCore.homeBlack,
      tabPath: Path$BtsCore.homePath
    },
    /* :: */[
      {
        showTabt: false,
        tabImage: Icons$BtsCore.homeBlack,
        tabPath: Path$BtsCore.homePath
      },
      /* :: */[
        {
          showTabt: false,
          tabImage: Icons$BtsCore.homeBlack,
          tabPath: Path$BtsCore.homePath
        },
        /* :: */[
          {
            showTabt: false,
            tabImage: Icons$BtsCore.homeBlack,
            tabPath: Path$BtsCore.homePath
          },
          /* [] */0
        ]
      ]
    ]
  ]
];

var initialState_badgeitems = [];

var initialState = {
  formLoad: false,
  formWidth: 0,
  formHeight: 0,
  value: "",
  showRecord: false,
  showItemRecord: false,
  recorditems: initialState_recorditems,
  menuPath: "/",
  tabitems: initialState_tabitems,
  index: 0,
  showCreate: false,
  badge: "",
  showBadge: false,
  beforeLoad: true,
  showItemBadge: false,
  badgeitems: initialState_badgeitems,
  showItemUser: false,
  checked: false
};

function NewBookBoard(Props) {
  var autoPath = Props.autoPath;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var menuShow = autoPath === "bookmarks";
  var maxHeight = String(state.formHeight) + "px";
  var badgeFormAJax = function (param) {
    Axiosapi$BtsCore.Form.badgeForm(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve(Curry._1(dispatch, /* SettingBadge */Block.__(2, [response.data.status])));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var notification = function (param) {
    new Notification("New message from dcode !", {
          body: "test",
          icon: ""
        });
    
  };
  var notificationAJax = function (param) {
    if (Notification.permission === "granted") {
      return notification(undefined);
    } else if (Notification.permission !== "denied") {
      Notification.requestPermission().then((function (response) {
                return Promise.resolve(response === "granted" ? notification(undefined) : undefined);
              })).catch((function (error) {
              return Promise.resolve((console.log(error), undefined));
            }));
      return ;
    } else {
      return ;
    }
  };
  var loginFormAJax = function (param) {
    Axiosapi$BtsCore.Form.loginForm(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                localStorage.setItem("name", response.data.name);
                localStorage.setItem("allname", response.data.allname);
                navigator.geolocation.getCurrentPosition(Basic$BtsCore.$$Location.success, Basic$BtsCore.$$Location.error, Basic$BtsCore.$$Location.items);
                Basic$BtsCore.Browser.success(navigator.userAgent);
                notificationAJax(undefined);
                tmp = badgeFormAJax(undefined);
              } else {
                localStorage.setItem("newid", "");
                sessionStorage.setItem("autoPath", autoPath);
                tmp = ReasonReactRouter.push(Path$BtsCore.loginPath);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          if (state.formLoad) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */Block.__(0, [
                  ObjectFormat$BtsCore.checkObjects(sessionStorage.getItem("search")),
                  ["/"].indexOf(autoPath)
                ]));
          Curry._1(dispatch, /* SettingFormWidth */Block.__(1, [
                  window.innerWidth,
                  window.innerHeight
                ]));
          var badgeId = loginFormAJax(undefined);
          return (function (param) {
                    return badgeId;
                  });
        }));
  var handleResize = function ($$event) {
    return Curry._1(dispatch, /* SettingFormWidth */Block.__(1, [
                  $$event.currentTarget.innerWidth,
                  $$event.currentTarget.innerHeight
                ]));
  };
  React.useEffect((function () {
          window.addEventListener("resize", handleResize, true);
          return (function (param) {
                    
                  });
        }), ([]));
  var changeField = React.useCallback((function (value) {
          Curry._1(dispatch, /* ChangeField */Block.__(3, [value]));
          sessionStorage.setItem("search", value);
          
        }));
  var searchRecord = React.useCallback((function (param) {
          Curry._1(dispatch, /* ShowRecord */0);
          Axiosapi$BtsCore.Form.record(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
                    return Promise.resolve(Curry._1(dispatch, /* ClickRecordItems */Block.__(4, [
                                      response.data.showItem,
                                      response.data.items
                                    ])));
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var keydownField = React.useCallback((function (keyCode) {
          if (keyCode === 13 && state.value !== "") {
            return ReasonReactRouter.push(Path$BtsCore.searchPath + ("#" + state.value));
          }
          
        }));
  var showMenu = React.useCallback((function (param) {
          if (state.formWidth < 1100) {
            if (!menuShow) {
              Curry._1(dispatch, /* SettingPath */Block.__(5, [autoPath]));
            }
            return ReasonReactRouter.push(menuShow ? state.menuPath : Path$BtsCore.bookmarksPath);
          }
          
        }));
  var clickItemTab = React.useCallback((function (i) {
          return (function (tabPath) {
              Curry._1(dispatch, /* ClickItemTab */Block.__(6, [i]));
              return ReasonReactRouter.push(tabPath);
            });
        }));
  var showCreate = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowCreate */1);
        }));
  var createForm = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowCreate */1);
        }));
  var searchBadge = React.useCallback((function (param) {
          Curry._1(dispatch, /* ShowBadge */2);
          Axiosapi$BtsCore.Form.badge(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
                    return Promise.resolve(Curry._1(dispatch, /* ClickBadgeItems */Block.__(7, [
                                      response.data.showItem,
                                      response.data.items
                                    ])));
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var showBadge = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowBadge */2);
        }));
  var showItemUser = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowItemUser */3);
        }));
  var switchChecked = React.useCallback((function (param) {
          return Curry._1(dispatch, /* SwitchChecked */4);
        }));
  var clickOut = React.useCallback((function (param) {
          localStorage.setItem("newid", "");
          sessionStorage.setItem("autoPath", autoPath);
          return ReasonReactRouter.push(Path$BtsCore.loginPath);
        }));
  var match$1 = state.formWidth < 1259;
  var match$2 = state.showRecord;
  return React.createElement(React.Fragment, undefined, React.createElement(AppBar$BtsCore.make, {
                  backgroundColor: "rgba(255,255,255,1)",
                  minHeight: "60",
                  children: React.createElement(GridContainer$BtsCore.make, {
                        direction: "row",
                        justify: "between",
                        alignItem: "center",
                        children: null
                      }, React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(GridContainer$BtsCore.make, {
                                  direction: "row",
                                  justify: "center",
                                  alignItem: "center",
                                  children: null
                                }, state.showRecord ? React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        right: "0",
                                        bottom: "0",
                                        width: "46px",
                                        xs: "no",
                                        children: null
                                      }) : React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        right: "0",
                                        bottom: "0",
                                        xs: "no",
                                        children: React.createElement(IconButton$BtsCore.make, {
                                              backgroundColor: "rgba(0,0,0,0.08)",
                                              padding: "10",
                                              children: React.createElement(IconAction$BtsCore.make, {
                                                    animation: "circleTop",
                                                    src: Icons$BtsCore.menuBlack
                                                  })
                                            })
                                      }), match$1 ? (
                                    match$2 ? React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            width: "38px",
                                            xs: "auto",
                                            children: null
                                          }) : React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "auto",
                                            children: React.createElement(IconButton$BtsCore.make, {
                                                  padding: "8",
                                                  onClick: searchRecord,
                                                  children: null
                                                }, React.createElement(Tooltip$BtsCore.make, {
                                                      location: "bottom",
                                                      backgroundColor: "rgba(255,0,0,0.8)",
                                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                                            id: "Action.search",
                                                            defaultMessage: "Search"
                                                          })
                                                    }), React.createElement(IconAction$BtsCore.make, {
                                                      style: Together$BtsCore.zIndexGrow,
                                                      animation: "circle",
                                                      src: Icons$BtsCore.searchBlack
                                                    }))
                                          })
                                  ) : (
                                    match$2 ? React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            width: "240px",
                                            xs: "auto",
                                            children: null
                                          }) : React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            width: "242px",
                                            xs: "auto",
                                            children: React.createElement(TextFieldOutline$BtsCore.make, {
                                                  top: "0",
                                                  right: "0",
                                                  bottom: "0",
                                                  left: "0",
                                                  borderTop: "12",
                                                  borderBottom: "12",
                                                  borderRadius: "20",
                                                  value: state.value,
                                                  onClick: searchRecord,
                                                  children: null
                                                })
                                          })
                                  ), state.formWidth < 1100 ? React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        right: "0",
                                        bottom: "0",
                                        left: "0",
                                        xs: "no",
                                        children: React.createElement(IconButton$BtsCore.make, {
                                              padding: "12",
                                              borderRadius: "20",
                                              onClick: showMenu,
                                              children: React.createElement(IconAction$BtsCore.make, {
                                                    animation: "circleTop",
                                                    src: menuShow ? Icons$BtsCore.menuWarn : Icons$BtsCore.menuBlack
                                                  })
                                            })
                                      }) : null, state.showRecord ? React.createElement(NewBookRecord$BtsCore.make, {
                                        maxHeight: maxHeight,
                                        value: state.value,
                                        beforeLoad: state.beforeLoad,
                                        showItem: state.showItemRecord,
                                        items: state.recorditems,
                                        onChange: (function ($$event) {
                                            return Curry._1(changeField, $$event.target.value);
                                          }),
                                        onKeyDown: (function ($$event) {
                                            return Curry._1(keydownField, $$event.keyCode);
                                          }),
                                        clickShow: searchRecord
                                      }) : null)
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "auto",
                            maxWidth: "55%",
                            children: state.formWidth < 701 ? null : React.createElement(Tabs$BtsCore.make, {
                                    maxWidth: "558",
                                    display: "block",
                                    id: "tab-",
                                    index: state.index,
                                    short: 10,
                                    height: "3",
                                    children: $$Array.of_list(List.mapi((function (i, tabtitem) {
                                                return React.createElement(Tab$BtsCore.make, {
                                                            showTab: tabtitem.showTabt,
                                                            maxWidth: "111.6",
                                                            borderRadius: "15",
                                                            id: "tab-" + String(i),
                                                            animationName: "none",
                                                            onClick: (function (param) {
                                                                return Curry._2(clickItemTab, i, tabtitem.tabPath);
                                                              }),
                                                            children: React.createElement(IconAction$BtsCore.make, {
                                                                  width: "28",
                                                                  height: "28",
                                                                  animation: "leftRight",
                                                                  src: tabtitem.tabImage
                                                                })
                                                          });
                                              }), state.tabitems))
                                  })
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(GridContainer$BtsCore.make, {
                                  direction: "row",
                                  justify: "end",
                                  alignItem: "center",
                                  children: null
                                }, state.formWidth < 1259 ? null : React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        right: "0",
                                        bottom: "0",
                                        left: "0",
                                        xs: "no",
                                        children: React.createElement(Chip$BtsCore.make, {
                                              right: "0",
                                              enterBorderWidth: "0",
                                              downBorderWidth: "0",
                                              borderWidth: "0",
                                              children: /* tuple */[
                                                React.createElement(Typography$BtsCore.make, {
                                                      variant: "subtitle2",
                                                      children: ObjectFormat$BtsCore.checkObjects(localStorage.getItem("name"))
                                                    }),
                                                React.createElement(Typography$BtsCore.make, {
                                                      variant: "subtitle2",
                                                      children: ObjectFormat$BtsCore.checkObjects(localStorage.getItem("allname"))
                                                    })
                                              ]
                                            })
                                      }), React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "0",
                                      bottom: "0",
                                      left: "0",
                                      xs: "no",
                                      children: null
                                    }, React.createElement(IconButton$BtsCore.make, {
                                          style: OutSide$BtsCore.butnRight,
                                          padding: "8",
                                          className: "butnToolAction",
                                          onClick: showCreate,
                                          children: null
                                        }, React.createElement(Tooltip$BtsCore.make, {
                                              location: "bottom",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "create",
                                                    defaultMessage: "Create"
                                                  })
                                            }), React.createElement(IconAction$BtsCore.make, {
                                              style: Together$BtsCore.zIndexGrow,
                                              animation: "leftRight",
                                              src: Icons$BtsCore.addBlack
                                            })), state.showCreate ? React.createElement(NewBookCreate$BtsCore.make, {
                                            maxHeight: maxHeight,
                                            createForm: createForm,
                                            clickShow: showCreate
                                          }) : null), React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "0",
                                      bottom: "0",
                                      left: "0",
                                      xs: "no",
                                      children: null
                                    }, React.createElement(IconButton$BtsCore.make, {
                                          style: OutSide$BtsCore.butnRight,
                                          padding: "8",
                                          className: "butnToolAction",
                                          onClick: searchBadge,
                                          children: null
                                        }, React.createElement(Badge$BtsCore.make, {
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: state.badge
                                            }), React.createElement(Tooltip$BtsCore.make, {
                                              location: "bottom",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Action.notice",
                                                    defaultMessage: "Notice"
                                                  })
                                            }), React.createElement(IconAction$BtsCore.make, {
                                              style: Together$BtsCore.zIndexGrow,
                                              animation: "leftRight",
                                              src: Icons$BtsCore.notificationsBlack
                                            })), state.showBadge ? React.createElement(NewBookBadge$BtsCore.make, {
                                            maxHeight: maxHeight,
                                            beforeLoad: state.beforeLoad,
                                            showItem: state.showItemBadge,
                                            items: state.badgeitems,
                                            clickShow: showBadge
                                          }) : null), React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "0",
                                      bottom: "0",
                                      left: "0",
                                      xs: "no",
                                      children: null
                                    }, React.createElement(IconButton$BtsCore.make, {
                                          style: OutSide$BtsCore.butnRight,
                                          padding: "8",
                                          className: "butnToolAction",
                                          onClick: showItemUser,
                                          children: null
                                        }, React.createElement(Tooltip$BtsCore.make, {
                                              location: "bottom",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Action.account",
                                                    defaultMessage: "Account"
                                                  })
                                            }), React.createElement(IconAction$BtsCore.make, {
                                              style: Together$BtsCore.zIndexGrow,
                                              animation: "leftRight",
                                              src: Icons$BtsCore.arrowDownBlack
                                            })), state.showItemUser ? React.createElement(NewBookUser$BtsCore.make, {
                                            checked: state.checked,
                                            switchChecked: switchChecked,
                                            clickOut: clickOut,
                                            clickShow: showItemUser
                                          }) : null))
                          }))
                }), children);
}

var make = NewBookBoard;

export {
  reducer ,
  initialState ,
  make ,
  
}
/*  Not a pure module */
