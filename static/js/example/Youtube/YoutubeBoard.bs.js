// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReactIntl from "react-intl";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Path$BtsCore from "../../features/Path.bs.js";
import * as Badge$BtsCore from "../../material-ui/core/Badge/Badge.bs.js";
import * as Basic$BtsCore from "../../setting/Basic.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as AppBar$BtsCore from "../../material-ui/core/AppBar/AppBar.bs.js";
import * as Avatar$BtsCore from "../../material-ui/core/Avatar/Avatar.bs.js";
import * as Button$BtsCore from "../../material-ui/core/Button/Button.bs.js";
import * as OutSide$BtsCore from "../../styles/OutSide/OutSide.bs.js";
import * as Tooltip$BtsCore from "../../material-ui/core/Tooltip/Tooltip.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as Together$BtsCore from "../../styles/Together/Together.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as NewYouUser$BtsCore from "./NewYouUser.bs.js";
import * as Typography$BtsCore from "../../material-ui/core/Typography/Typography.bs.js";
import * as NewYouBadge$BtsCore from "./NewYouBadge.bs.js";
import * as ObjectFormat$BtsCore from "../../controls/ObjectFormat.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as TextFieldOutline$BtsCore from "../../material-ui/core/TextField/TextFieldOutline.bs.js";

((require('../../../scss/example/Youtube/youtubeBoard.scss')));

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* ShowLogin */0 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: !state.showLogin,
                  value: state.value,
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* ShowRecord */1 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: state.value,
                  showRecord: !state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* ShowBadge */2 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: state.value,
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: !state.showBadge,
                  badgeLoad: true,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* ShowMenu */3 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: state.value,
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: !state.showMenu
                };
      
    }
  } else {
    switch (action.tag | 0) {
      case /* SettingFormLoad */0 :
          return {
                  formLoad: !state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: action[0],
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* SettingFormWidth */1 :
          return {
                  formLoad: state.formLoad,
                  formWidth: action[0],
                  formHeight: action[1],
                  showLogin: state.showLogin,
                  value: state.value,
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* SettingBadge */2 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: state.value,
                  showRecord: state.showRecord,
                  badge: action[0],
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* ChangeField */3 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: action[0],
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: state.badgeLoad,
                  showItem: state.showItem,
                  items: state.items,
                  showMenu: state.showMenu
                };
      case /* ClickBadgeItems */4 :
          return {
                  formLoad: state.formLoad,
                  formWidth: state.formWidth,
                  formHeight: state.formHeight,
                  showLogin: state.showLogin,
                  value: state.value,
                  showRecord: state.showRecord,
                  badge: state.badge,
                  showBadge: state.showBadge,
                  badgeLoad: !state.badgeLoad,
                  showItem: action[0],
                  items: action[1],
                  showMenu: state.showMenu
                };
      
    }
  }
}

var initialState_items = [];

var initialState = {
  formLoad: false,
  formWidth: 0,
  formHeight: 0,
  showLogin: true,
  value: "",
  showRecord: false,
  badge: "",
  showBadge: false,
  badgeLoad: true,
  showItem: false,
  items: initialState_items,
  showMenu: false
};

function widths(width) {
  if (width !== undefined) {
    return width + "%";
  } else {
    return "95%";
  }
}

function bottoms(bottom) {
  if (bottom !== undefined) {
    return bottom + "px";
  } else {
    return "0px";
  }
}

function YoutubeBoard(Props) {
  var autoPath = Props.autoPath;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var maxHeight = String(state.formHeight) + "px";
  var badgeFormAJax = function (param) {
    Axiosapi$BtsCore.Form.badgeForm(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              return Promise.resolve(Curry._1(dispatch, /* SettingBadge */Block.__(2, [response.data.status])));
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var loginFormAJax = function (param) {
    Axiosapi$BtsCore.Form.loginForm(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                localStorage.setItem("name", response.data.name);
                localStorage.setItem("allname", response.data.allname);
                navigator.geolocation.getCurrentPosition(Basic$BtsCore.$$Location.success, Basic$BtsCore.$$Location.error, Basic$BtsCore.$$Location.items);
                Basic$BtsCore.Browser.success(navigator.userAgent);
                tmp = badgeFormAJax(undefined);
              } else {
                localStorage.setItem("newid", "");
                tmp = Curry._1(dispatch, /* ShowLogin */0);
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  React.useEffect((function () {
          if (state.formLoad) {
            return (function (param) {
                      console.log("action");
                      
                    });
          }
          Curry._1(dispatch, /* SettingFormLoad */Block.__(0, [ObjectFormat$BtsCore.checkObjects(sessionStorage.getItem("search"))]));
          Curry._1(dispatch, /* SettingFormWidth */Block.__(1, [
                  window.innerWidth,
                  window.innerHeight
                ]));
          var badgeId = loginFormAJax(undefined);
          return (function (param) {
                    return badgeId;
                  });
        }));
  var handleResize = function ($$event) {
    return Curry._1(dispatch, /* SettingFormWidth */Block.__(1, [
                  $$event.currentTarget.innerWidth,
                  $$event.currentTarget.innerHeight
                ]));
  };
  React.useEffect((function () {
          window.addEventListener("resize", handleResize, true);
          return (function (param) {
                    
                  });
        }), ([]));
  var changeField = React.useCallback((function (value) {
          Curry._1(dispatch, /* ChangeField */Block.__(3, [value]));
          sessionStorage.setItem("search", value);
          
        }));
  var searchRecord = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowRecord */1);
        }));
  var keydownField = React.useCallback((function (keyCode) {
          if (keyCode === 13 && state.value !== "") {
            return ReasonReactRouter.push(Path$BtsCore.searchPath + ("#" + state.value));
          }
          
        }));
  var searchBadge = React.useCallback((function (param) {
          Curry._1(dispatch, /* ShowBadge */2);
          Axiosapi$BtsCore.Form.badge(Data$BtsCore.userData(localStorage.getItem("newid"))).then((function (response) {
                    return Promise.resolve(Curry._1(dispatch, /* ClickBadgeItems */Block.__(4, [
                                      response.data.showItem,
                                      response.data.items
                                    ])));
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), undefined));
                }));
          
        }));
  var showBadge = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowBadge */2);
        }));
  var showMenu = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowMenu */3);
        }));
  var clickOut = React.useCallback((function (param) {
          localStorage.setItem("newid", "");
          sessionStorage.setItem("autoPath", autoPath);
          return ReasonReactRouter.push(Path$BtsCore.loginPath);
        }));
  var match$1 = state.showLogin;
  var match$2 = state.formWidth < 656;
  var match$3 = state.showLogin;
  var match$4 = state.formWidth < 656;
  return React.createElement(React.Fragment, undefined, React.createElement(AppBar$BtsCore.make, {
                  children: React.createElement(GridContainer$BtsCore.make, {
                        direction: "row",
                        justify: "between",
                        alignItem: "center",
                        children: null
                      }, React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            width: "140px",
                            xs: "no",
                            children: React.createElement(GridContainer$BtsCore.make, {
                                  direction: "row",
                                  justify: "start",
                                  alignItem: "center",
                                  children: null
                                }, React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "16",
                                      bottom: "0",
                                      left: "0",
                                      width: "46px",
                                      xs: "no",
                                      children: null
                                    }), React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "0",
                                      bottom: "0",
                                      left: "0",
                                      xs: "auto",
                                      children: React.createElement(Typography$BtsCore.make, {
                                            variant: "subheading",
                                            style: Together$BtsCore.zIndexGrow,
                                            fontSize: "1.15rem",
                                            children: "BTS"
                                          })
                                    }))
                          }), match$1 && !match$2 ? React.createElement(GridItem$BtsCore.make, {
                              top: "0",
                              right: "0",
                              bottom: "0",
                              left: "0",
                              xs: "auto",
                              maxWidth: "50%",
                              children: React.createElement(TextFieldOutline$BtsCore.make, {
                                    top: "0",
                                    right: "12",
                                    bottom: "0",
                                    left: "0",
                                    borderTop: "10",
                                    borderBottom: "10",
                                    value: state.value,
                                    onChange: (function ($$event) {
                                        return Curry._1(changeField, $$event.target.value);
                                      }),
                                    onKeyDown: (function ($$event) {
                                        return Curry._1(keydownField, $$event.keyCode);
                                      }),
                                    children: null
                                  })
                            }) : null, React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(GridContainer$BtsCore.make, {
                                  direction: "row",
                                  justify: "end",
                                  alignItem: "center",
                                  children: null
                                }, match$3 && match$4 ? React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        right: "0",
                                        bottom: "0",
                                        left: "0",
                                        xs: "no",
                                        children: React.createElement(IconButton$BtsCore.make, {
                                              padding: "8",
                                              onClick: searchRecord,
                                              children: null
                                            }, React.createElement(Tooltip$BtsCore.make, {
                                                  location: "bottom",
                                                  backgroundColor: "rgba(255,0,0,0.8)",
                                                  children: React.createElement(ReactIntl.FormattedMessage, {
                                                        id: "Action.search",
                                                        defaultMessage: "Search"
                                                      })
                                                }), React.createElement(IconAction$BtsCore.make, {
                                                  animation: "circle",
                                                  src: Icons$BtsCore.searchBlack
                                                }))
                                      }) : null, React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "0",
                                      bottom: "0",
                                      left: "0",
                                      xs: "no",
                                      children: React.createElement(IconButton$BtsCore.make, {
                                            style: OutSide$BtsCore.butnRight,
                                            padding: "8",
                                            className: "butnToolAction",
                                            children: null
                                          }, React.createElement(Tooltip$BtsCore.make, {
                                                location: "bottom",
                                                backgroundColor: "rgba(255,0,0,0.8)",
                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                      id: "Action.network",
                                                      defaultMessage: "Network"
                                                    })
                                              }), React.createElement(IconAction$BtsCore.make, {
                                                style: Together$BtsCore.zIndexGrow,
                                                animation: "leftRight",
                                                src: Icons$BtsCore.wifiBlack
                                              }))
                                    }), React.createElement(GridItem$BtsCore.make, {
                                      top: "0",
                                      right: "0",
                                      bottom: "0",
                                      left: "0",
                                      xs: "no",
                                      children: React.createElement(IconButton$BtsCore.make, {
                                            style: OutSide$BtsCore.butnRight,
                                            padding: "8",
                                            className: "butnToolAction",
                                            onClick: (function (param) {
                                                return ReasonReactRouter.push(Path$BtsCore.colorPath);
                                              }),
                                            children: null
                                          }, React.createElement(Tooltip$BtsCore.make, {
                                                location: "bottom",
                                                backgroundColor: "rgba(255,0,0,0.8)",
                                                children: React.createElement(ReactIntl.FormattedMessage, {
                                                      id: "Action.color",
                                                      defaultMessage: "Color"
                                                    })
                                              }), React.createElement(IconAction$BtsCore.make, {
                                                style: Together$BtsCore.zIndexGrow,
                                                animation: "leftRight",
                                                src: Icons$BtsCore.colorLensBlack
                                              }))
                                    }), state.showLogin ? React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "no",
                                            children: null
                                          }, React.createElement(IconButton$BtsCore.make, {
                                                style: OutSide$BtsCore.butnRight,
                                                padding: "8",
                                                className: "butnToolAction",
                                                onClick: searchBadge,
                                                children: null
                                              }, React.createElement(Badge$BtsCore.make, {
                                                    backgroundColor: "transparent",
                                                    children: state.badge
                                                  }), React.createElement(Tooltip$BtsCore.make, {
                                                    location: "bottom",
                                                    backgroundColor: "rgba(255,0,0,0.8)",
                                                    children: React.createElement(ReactIntl.FormattedMessage, {
                                                          id: "Action.notice",
                                                          defaultMessage: "Notice"
                                                        })
                                                  }), React.createElement(IconAction$BtsCore.make, {
                                                    style: Together$BtsCore.zIndexGrow,
                                                    animation: "leftRight",
                                                    src: Icons$BtsCore.notificationsBlack
                                                  })), state.showBadge ? React.createElement(NewYouBadge$BtsCore.make, {
                                                  maxHeight: maxHeight,
                                                  beforeLoad: state.badgeLoad,
                                                  showItem: state.showItem,
                                                  items: state.items,
                                                  clickShow: showBadge
                                                }) : null), React.createElement(GridItem$BtsCore.make, {
                                            top: "0",
                                            right: "0",
                                            bottom: "0",
                                            left: "0",
                                            xs: "no",
                                            children: null
                                          }, React.createElement(Avatar$BtsCore.make, {
                                                top: "5",
                                                right: "16",
                                                bottom: "5",
                                                left: "0",
                                                onClick: showMenu,
                                                children: ObjectFormat$BtsCore.checkObjects(localStorage.getItem("name"))
                                              }), state.showMenu ? React.createElement(NewYouUser$BtsCore.make, {
                                                  clickOut: clickOut,
                                                  clickShow: showMenu
                                                }) : null)) : React.createElement(GridItem$BtsCore.make, {
                                        top: "0",
                                        right: "15",
                                        bottom: "0",
                                        left: "0",
                                        xs: "no",
                                        children: React.createElement(Button$BtsCore.make, {
                                              onClick: (function (param) {
                                                  sessionStorage.setItem("autoPath", autoPath);
                                                  return ReasonReactRouter.push(Path$BtsCore.loginPath);
                                                }),
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Action.login",
                                                    defaultMessage: "Login"
                                                  })
                                            })
                                      }))
                          }))
                }), children);
}

var make = YoutubeBoard;

export {
  reducer ,
  initialState ,
  widths ,
  bottoms ,
  make ,
  
}
/*  Not a pure module */
