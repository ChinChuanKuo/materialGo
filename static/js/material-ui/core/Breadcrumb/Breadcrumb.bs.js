// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

function margins(margin) {
  if (margin !== undefined) {
    return margin + "px";
  } else {
    return "0px";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(255,255,255,0.7)";
  }
}

function fontSizes(fontSize) {
  if (fontSize !== undefined) {
    return fontSize;
  } else {
    return "1rem";
  }
}

function fontFamilys(fontFamily) {
  if (fontFamily !== undefined) {
    return fontFamily;
  } else {
    return "'Roboto', 'Helvetica', 'Arial', sans-serif";
  }
}

function fontWeights(fontWeight) {
  if (fontWeight !== undefined) {
    return fontWeight;
  } else {
    return "400";
  }
}

function lineHeights(lineHeight) {
  if (lineHeight !== undefined) {
    return lineHeight;
  } else {
    return "1.5";
  }
}

function letterSpacings(letterSpacing) {
  if (letterSpacing !== undefined) {
    return letterSpacing;
  } else {
    return "0.00938em";
  }
}

function Breadcrumb(Props) {
  var style = Props.style;
  var top = Props.top;
  var right = Props.right;
  var bottom = Props.bottom;
  var left = Props.left;
  var color = Props.color;
  var fontSize = Props.fontSize;
  var fontFamily = Props.fontFamily;
  var fontWeight = Props.fontWeight;
  var lineHeight = Props.lineHeight;
  var letterSpacing = Props.letterSpacing;
  var children = Props.children;
  return React.createElement("nav", {
              style: Object.assign(({}), {
                    color: color !== undefined ? color : "rgba(255,255,255,0.7)",
                    fontFamily: fontFamily !== undefined ? fontFamily : "'Roboto', 'Helvetica', 'Arial', sans-serif",
                    fontSize: fontSize !== undefined ? fontSize : "1rem",
                    fontWeight: fontWeight !== undefined ? fontWeight : "400",
                    letterSpacing: letterSpacing !== undefined ? letterSpacing : "0.00938em",
                    lineHeight: lineHeight !== undefined ? lineHeight : "1.5",
                    marginTop: margins(top),
                    marginRight: margins(right),
                    marginBottom: margins(bottom),
                    marginLeft: margins(left)
                  }, Setting$BtsCore.styleObjects(style))
            }, React.createElement("ol", {
                  style: {
                    display: "flex",
                    margin: "0",
                    padding: "0",
                    alignItems: "center",
                    flexWrap: "wrap"
                  }
                }, children));
}

var make = Breadcrumb;

export {
  margins ,
  colors ,
  fontSizes ,
  fontFamilys ,
  fontWeights ,
  lineHeights ,
  letterSpacings ,
  make ,
  
}
/* react Not a pure module */
