// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/MenuItem/menuItem.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function paddingOthers(other) {
  if (other !== undefined) {
    return other + "px";
  } else {
    return "11px";
  }
}

function paddingRights(right) {
  if (right !== undefined) {
    return right + "px";
  } else {
    return "16px";
  }
}

function disablePaddings(left, disablePadding) {
  if (left !== undefined) {
    return left + "px";
  } else if (disablePadding) {
    return "32px";
  } else {
    return "16px";
  }
}

function disabledBackgroundColors(disabledBackgroundColor) {
  if (disabledBackgroundColor !== undefined) {
    return disabledBackgroundColor;
  } else {
    return "rgba(102,102,102,0.8)";
  }
}

function otherBackgroundColors(otherBackgroundColor) {
  if (otherBackgroundColor !== undefined) {
    return otherBackgroundColor;
  } else {
    return "rgba(0,0,0,0.08)";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "rgba(255,255,255,1)";
  }
}

function borderRadiuses(borderRadius) {
  if (borderRadius !== undefined) {
    return borderRadius + "px";
  } else {
    return "0px";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(0,0,0,1)";
  }
}

function widths(width) {
  if (width !== undefined) {
    return "calc(100% - " + (width + "px)");
  } else {
    return "calc(100% - 60px)";
  }
}

function MenuIcon(Props) {
  var style = Props.style;
  var top = Props.top;
  var right = Props.right;
  var bottom = Props.bottom;
  var left = Props.left;
  var disabledBackgroundColor = Props.disabledBackgroundColor;
  var enterBackgroundColor = Props.enterBackgroundColor;
  var downBackgroundColor = Props.downBackgroundColor;
  var backgroundColor = Props.backgroundColor;
  var disablePadding = Props.disablePadding;
  var topLeft = Props.topLeft;
  var topRight = Props.topRight;
  var bottomRight = Props.bottomRight;
  var bottomLeft = Props.bottomLeft;
  var color = Props.color;
  var width = Props.width;
  var disabled = Props.disabled;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = Setting$BtsCore.disabledObjects(disabled);
  var match$2 = state.enter;
  var match$3 = state.down;
  var tmp = {
    className: "jr0u89wl jn23b2n j1a697ls j1nroktp jkz2jqj",
    role: "menuitem",
    style: Object.assign(({}), {
          backgroundColor: match$1 ? (
              disabledBackgroundColor !== undefined ? disabledBackgroundColor : "rgba(102,102,102,0.8)"
            ) : (
              match$2 ? (
                  match$3 ? (
                      downBackgroundColor !== undefined ? downBackgroundColor : "rgba(0,0,0,0.08)"
                    ) : (
                      enterBackgroundColor !== undefined ? enterBackgroundColor : "rgba(0,0,0,0.08)"
                    )
                ) : (
                  backgroundColor !== undefined ? backgroundColor : "rgba(255,255,255,1)"
                )
            ),
          color: color !== undefined ? color : "rgba(0,0,0,1)",
          paddingTop: paddingOthers(top),
          paddingRight: paddingRights(right),
          paddingBottom: paddingOthers(bottom),
          paddingLeft: disablePaddings(left, Setting$BtsCore.disabledObjects(disablePadding)),
          borderTopLeftRadius: borderRadiuses(topLeft),
          borderTopRightRadius: borderRadiuses(topRight),
          borderBottomLeftRadius: borderRadiuses(bottomLeft),
          borderBottomRightRadius: borderRadiuses(bottomRight)
        }, Setting$BtsCore.styleObjects(style)),
    disabled: Setting$BtsCore.disabledObjects(disabled),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("li", tmp, React.createElement("span", {
                  className: "j1xd9iw9s"
                }, children[0]), React.createElement("span", {
                  style: {
                    width: widths(width)
                  }
                }, children[1]), React.createElement("span", {
                  className: "jb3bkca"
                }));
}

var make = MenuIcon;

export {
  reducer ,
  initialState ,
  paddingOthers ,
  paddingRights ,
  disablePaddings ,
  disabledBackgroundColors ,
  otherBackgroundColors ,
  backgroundColors ,
  borderRadiuses ,
  colors ,
  widths ,
  make ,
  
}
/*  Not a pure module */
