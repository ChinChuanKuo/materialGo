// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Avatar/avatar.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function margins(margin) {
  if (margin !== undefined) {
    return margin + "px";
  } else {
    return "10px";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "#fafafa";
  }
}

function borderWidths(borderWidth) {
  if (borderWidth !== undefined) {
    return borderWidth + "px";
  } else {
    return "1px";
  }
}

function borderStyles(borderStyle) {
  if (borderStyle !== undefined) {
    return borderStyle;
  } else {
    return "solid";
  }
}

function borderColors(borderColor) {
  if (borderColor !== undefined) {
    return borderColor;
  } else {
    return "transparent";
  }
}

function enterBorderColors(enterBorderColor) {
  if (enterBorderColor !== undefined) {
    return enterBorderColor;
  } else {
    return "rgba(255,0,0,1)";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "#bdbdbd";
  }
}

function Avatar(Props) {
  var style = Props.style;
  var top = Props.top;
  var right = Props.right;
  var bottom = Props.bottom;
  var left = Props.left;
  var color = Props.color;
  var borderWidth = Props.borderWidth;
  var borderStyle = Props.borderStyle;
  var enterBorderColor = Props.enterBorderColor;
  var downBorderColor = Props.downBorderColor;
  var borderColor = Props.borderColor;
  var backgroundColor = Props.backgroundColor;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.enter;
  var match$2 = state.down;
  var tmp = {
    className: "j4f2n9i",
    style: Object.assign(({}), {
          backgroundColor: backgroundColor !== undefined ? backgroundColor : "#bdbdbd",
          borderColor: match$1 ? (
              match$2 ? (
                  downBorderColor !== undefined ? downBorderColor : "rgba(255,0,0,1)"
                ) : (
                  enterBorderColor !== undefined ? enterBorderColor : "rgba(255,0,0,1)"
                )
            ) : (
              borderColor !== undefined ? borderColor : "transparent"
            ),
          borderStyle: borderStyle !== undefined ? borderStyle : "solid",
          borderWidth: borderWidths(borderWidth),
          color: color !== undefined ? color : "#fafafa",
          cursor: "pointer",
          marginTop: margins(top),
          marginRight: margins(right),
          marginBottom: margins(bottom),
          marginLeft: margins(left)
        }, Setting$BtsCore.styleObjects(style)),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("header", tmp, children);
}

var make = Avatar;

export {
  reducer ,
  initialState ,
  margins ,
  colors ,
  borderWidths ,
  borderStyles ,
  borderColors ,
  enterBorderColors ,
  backgroundColors ,
  make ,
  
}
/*  Not a pure module */
