// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Avatar/avatar.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function margins(value) {
  if (value !== undefined) {
    return value + "px";
  } else {
    return "10px";
  }
}

function widths(value) {
  if (value !== undefined) {
    return value + "px";
  } else {
    return "1px";
  }
}

function styles(value) {
  if (value !== undefined) {
    return value;
  } else {
    return "solid";
  }
}

function enterColors(value) {
  if (value !== undefined) {
    return value;
  } else {
    return "rgba(255,0,0,1)";
  }
}

function backgroundColors(value) {
  if (value !== undefined) {
    return value;
  } else {
    return "#bdbdbd";
  }
}

function colors(value) {
  if (value !== undefined) {
    return value;
  } else {
    return "#fafafa";
  }
}

function Avatar(Props) {
  var style = Props.style;
  var top = Props.top;
  var right = Props.right;
  var bottom = Props.bottom;
  var left = Props.left;
  var color = Props.color;
  var downColor = Props.downColor;
  var enterColor = Props.enterColor;
  var borderWidth = Props.borderWidth;
  var downBorderWidth = Props.downBorderWidth;
  var enterBorderWidth = Props.enterBorderWidth;
  var borderStyle = Props.borderStyle;
  var downBorderStyle = Props.downBorderStyle;
  var enterBorderStyle = Props.enterBorderStyle;
  var borderColor = Props.borderColor;
  var downBorderColor = Props.downBorderColor;
  var enterBorderColor = Props.enterBorderColor;
  var backgroundColor = Props.backgroundColor;
  var downBackgroundColor = Props.downBackgroundColor;
  var enterBackgroundColor = Props.enterBackgroundColor;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.enter;
  var match$2 = state.down;
  var match$3 = state.enter;
  var match$4 = state.down;
  var match$5 = state.enter;
  var match$6 = state.down;
  var match$7 = state.enter;
  var match$8 = state.down;
  var match$9 = state.enter;
  var match$10 = state.down;
  var tmp = {
    className: "j4f2n9i",
    style: Object.assign(({}), {
          backgroundColor: match$1 ? (
              match$2 ? (
                  downBackgroundColor !== undefined ? downBackgroundColor : "#bdbdbd"
                ) : (
                  enterBackgroundColor !== undefined ? enterBackgroundColor : "#bdbdbd"
                )
            ) : (
              backgroundColor !== undefined ? backgroundColor : "#bdbdbd"
            ),
          borderColor: match$3 ? (
              match$4 ? (
                  downBorderColor !== undefined ? downBorderColor : "rgba(255,0,0,1)"
                ) : (
                  enterBorderColor !== undefined ? enterBorderColor : "rgba(255,0,0,1)"
                )
            ) : (
              borderColor !== undefined ? borderColor : "#fafafa"
            ),
          borderStyle: match$5 ? (
              match$6 ? (
                  downBorderStyle !== undefined ? downBorderStyle : "solid"
                ) : (
                  enterBorderStyle !== undefined ? enterBorderStyle : "solid"
                )
            ) : (
              borderStyle !== undefined ? borderStyle : "solid"
            ),
          borderWidth: match$7 ? (
              match$8 ? widths(downBorderWidth) : widths(enterBorderWidth)
            ) : widths(borderWidth),
          color: match$9 ? (
              match$10 ? (
                  downColor !== undefined ? downColor : "#fafafa"
                ) : (
                  enterColor !== undefined ? enterColor : "#fafafa"
                )
            ) : (
              color !== undefined ? color : "#fafafa"
            ),
          cursor: "pointer",
          marginTop: margins(top),
          marginRight: margins(right),
          marginBottom: margins(bottom),
          marginLeft: margins(left)
        }, Setting$BtsCore.styleObjects(style)),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("header", tmp, children);
}

var make = Avatar;

export {
  reducer ,
  initialState ,
  margins ,
  widths ,
  styles ,
  enterColors ,
  backgroundColors ,
  colors ,
  make ,
  
}
/*  Not a pure module */
