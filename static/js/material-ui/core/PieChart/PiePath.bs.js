// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function mathCos(size, value) {
  return String(size + size * Math.cos(value * Math.PI / 180.0) | 0);
}

function mathSin(size, value) {
  return String(size - size * Math.sin(value * Math.PI / 180.0) | 0);
}

function overCircumference(from, to_) {
  if (to_ - from >= 180.0) {
    return "1";
  } else {
    return "0";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(255,0,0,1)";
  }
}

function enterOpacitys(enterOpacity) {
  if (enterOpacity !== undefined) {
    return enterOpacity;
  } else {
    return "0.8";
  }
}

function downOpacitys(downOpacity) {
  if (downOpacity !== undefined) {
    return downOpacity;
  } else {
    return "0.6";
  }
}

function strokes(stroke) {
  if (stroke !== undefined) {
    return stroke;
  } else {
    return "rgba(255,255,255,1)";
  }
}

function enterStrokeWidths(enterStrokeWidth) {
  if (enterStrokeWidth !== undefined) {
    return enterStrokeWidth;
  } else {
    return "10";
  }
}

function downStrokeWidths(downStrokeWidth) {
  if (downStrokeWidth !== undefined) {
    return downStrokeWidth;
  } else {
    return "10";
  }
}

function strokeWidths(strokeWidth) {
  if (strokeWidth !== undefined) {
    return strokeWidth;
  } else {
    return "0";
  }
}

function calcModes(calcMode) {
  if (calcMode !== undefined) {
    return calcMode;
  } else {
    return "linear";
  }
}

function durs(dur) {
  if (dur !== undefined) {
    return dur + "s";
  } else {
    return "1s";
  }
}

function PiePath(Props) {
  var style = Props.style;
  var circles = Props.circles;
  var color = Props.color;
  var enterOpacity = Props.enterOpacity;
  var downOpacity = Props.downOpacity;
  var stroke = Props.stroke;
  var enterStrokeWidth = Props.enterStrokeWidth;
  var downStrokeWidth = Props.downStrokeWidth;
  var strokeWidth = Props.strokeWidth;
  var from = Props.from;
  var to_ = Props.to_;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var from$1 = from * 360.0;
  var to_$1 = to_ * 360.0;
  var match$1 = state.enter;
  var match$2 = state.down;
  var match$3 = state.enter;
  var match$4 = state.down;
  var tmp = {
    style: Object.assign(({}), {
          cursor: "pointer"
        }, Setting$BtsCore.styleObjects(style)),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      }),
    d: "M " + (String(circles | 0) + ("," + (String(circles | 0) + (" L " + (mathCos(circles, from$1) + ("," + (mathSin(circles, from$1) + (" A " + (String(circles | 0) + ("," + (String(circles | 0) + (" 0 " + (overCircumference(from$1, to_$1) + (",0 " + (mathCos(circles, to_$1) + ("," + (mathSin(circles, to_$1) + " Z"))))))))))))))))),
    fill: color !== undefined ? color : "rgba(255,0,0,1)",
    fillOpacity: match$1 ? (
        match$2 ? (
            downOpacity !== undefined ? downOpacity : "0.6"
          ) : (
            enterOpacity !== undefined ? enterOpacity : "0.8"
          )
      ) : "1",
    stroke: stroke !== undefined ? stroke : "rgba(255,255,255,1)",
    strokeWidth: match$3 ? (
        match$4 ? (
            downStrokeWidth !== undefined ? downStrokeWidth : "10"
          ) : (
            enterStrokeWidth !== undefined ? enterStrokeWidth : "10"
          )
      ) : (
        strokeWidth !== undefined ? strokeWidth : "0"
      )
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("g", { }, React.createElement("path", tmp, children));
}

var make = PiePath;

export {
  reducer ,
  initialState ,
  mathCos ,
  mathSin ,
  overCircumference ,
  colors ,
  enterOpacitys ,
  downOpacitys ,
  strokes ,
  enterStrokeWidths ,
  downStrokeWidths ,
  strokeWidths ,
  calcModes ,
  durs ,
  make ,
  
}
/* react Not a pure module */
