// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function fills(fill) {
  if (fill !== undefined) {
    return fill;
  } else {
    return "transparent";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(255,0,0,0.8)";
  }
}

function strokeWidths(size) {
  if (size !== undefined) {
    return size;
  } else {
    return "20";
  }
}

function calcModes(calcMode) {
  if (calcMode !== undefined) {
    return calcMode;
  } else {
    return "linear";
  }
}

function durs(dur) {
  if (dur !== undefined) {
    return dur + "s";
  } else {
    return "1s";
  }
}

function PieCircle(Props) {
  var style = Props.style;
  var fill = Props.fill;
  var enterColor = Props.enterColor;
  var downColor = Props.downColor;
  var color = Props.color;
  var size = Props.size;
  var from = Props.from;
  var to_ = Props.to_;
  var calcMode = Props.calcMode;
  var dur = Props.dur;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.enter;
  var match$2 = state.down;
  return React.createElement("circle", {
              style: Object.assign(({}), {
                    cursor: "pointer",
                    fill: fill !== undefined ? fill : "transparent",
                    stroke: match$1 ? (
                        match$2 ? (
                            downColor !== undefined ? downColor : "rgba(255,0,0,0.8)"
                          ) : (
                            enterColor !== undefined ? enterColor : "rgba(255,0,0,0.8)"
                          )
                      ) : (
                        color !== undefined ? color : "rgba(255,0,0,0.8)"
                      ),
                    strokeDasharray: "0 100",
                    strokeDashoffset: "-" + from,
                    strokeWidth: size !== undefined ? size : "20"
                  }, Setting$BtsCore.styleObjects(style)),
              onMouseDown: (function (param) {
                  return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
                }),
              onMouseEnter: (function (param) {
                  return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
                }),
              onMouseLeave: (function (param) {
                  return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
                }),
              onMouseUp: (function (param) {
                  return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
                }),
              cx: "16",
              cy: "16",
              r: "15.92"
            }, React.createElement("animate", {
                  attributeName: "stroke-dasharray",
                  calcMode: calcMode !== undefined ? calcMode : "linear",
                  dur: durs(dur),
                  fill: "freeze",
                  from: "0",
                  to: to_
                }));
}

var make = PieCircle;

export {
  reducer ,
  initialState ,
  fills ,
  colors ,
  strokeWidths ,
  calcModes ,
  durs ,
  make ,
  
}
/* react Not a pure module */
