// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/IconButton/iconButton.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function components(variant) {
  if (variant === "span") {
    return "span";
  } else {
    return "div";
  }
}

function disabledBackgroundColors(disabledBackgroundColor) {
  if (disabledBackgroundColor !== undefined) {
    return disabledBackgroundColor;
  } else {
    return "rgba(102,102,102,0.8)";
  }
}

function otherBackgroundColors(otherBackgroundColor) {
  if (otherBackgroundColor !== undefined) {
    return otherBackgroundColor;
  } else {
    return "rgba(0,0,0,0.08)";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "transparent";
  }
}

function paddings(padding) {
  if (padding !== undefined) {
    return padding + "px";
  } else {
    return "10px";
  }
}

function borderRadiuses(borderRadius) {
  if (borderRadius !== undefined) {
    return borderRadius + "%";
  } else {
    return "50%";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "inherit";
  }
}

function ariaLabels(ariaLabel) {
  if (ariaLabel !== undefined) {
    return ariaLabel;
  } else {
    return "This is Button";
  }
}

function classes(className) {
  var basic = "jss152 jss146";
  if (className !== undefined) {
    return basic + (" " + className);
  } else {
    return basic;
  }
}

function cursors(disabled) {
  if (disabled) {
    return "no-drop";
  } else {
    return "pointer";
  }
}

function pointerEvents(disabled) {
  if (disabled) {
    return "none";
  } else {
    return "initial";
  }
}

function IconButton(Props) {
  var variant = Props.variant;
  var style = Props.style;
  var disabledBackgroundColor = Props.disabledBackgroundColor;
  var enterBackgroundColor = Props.enterBackgroundColor;
  var downBackgroundColor = Props.downBackgroundColor;
  var backgroundColor = Props.backgroundColor;
  var padding = Props.padding;
  var borderRadius = Props.borderRadius;
  var color = Props.color;
  var ariaLabel = Props.ariaLabel;
  var className = Props.className;
  var disabled = Props.disabled;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = Setting$BtsCore.disabledObjects(disabled);
  var match$2 = state.enter;
  var match$3 = state.down;
  var disabled$1 = Setting$BtsCore.disabledObjects(disabled);
  var disabled$2 = Setting$BtsCore.disabledObjects(disabled);
  var tmp = {
    "aria-label": ariaLabel !== undefined ? ariaLabel : "This is Button",
    className: classes(className),
    role: "button",
    style: Object.assign(({}), {
          backgroundColor: match$1 ? (
              disabledBackgroundColor !== undefined ? disabledBackgroundColor : "rgba(102,102,102,0.8)"
            ) : (
              match$2 ? (
                  match$3 ? (
                      downBackgroundColor !== undefined ? downBackgroundColor : "rgba(0,0,0,0.08)"
                    ) : (
                      enterBackgroundColor !== undefined ? enterBackgroundColor : "rgba(0,0,0,0.08)"
                    )
                ) : (
                  backgroundColor !== undefined ? backgroundColor : "transparent"
                )
            ),
          color: color !== undefined ? color : "inherit",
          cursor: disabled$1 ? "no-drop" : "pointer",
          padding: paddings(padding),
          borderRadius: borderRadiuses(borderRadius),
          pointerEvents: disabled$2 ? "none" : "initial"
        }, Setting$BtsCore.styleObjects(style)),
    disabled: Setting$BtsCore.disabledObjects(disabled),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement(components(Setting$BtsCore.stringObjects(variant)), tmp, React.createElement("span", {
                  className: "jss151"
                }, children), React.createElement("span", {
                  className: "jss270"
                }));
}

var make = IconButton;

export {
  reducer ,
  initialState ,
  components ,
  disabledBackgroundColors ,
  otherBackgroundColors ,
  backgroundColors ,
  paddings ,
  borderRadiuses ,
  colors ,
  ariaLabels ,
  classes ,
  cursors ,
  pointerEvents ,
  make ,
  
}
/*  Not a pure module */
