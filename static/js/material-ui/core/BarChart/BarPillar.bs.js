// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function sizes(size) {
  if (size !== undefined) {
    return size + "px";
  } else {
    return "300px";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(255,0,0,1)";
  }
}

function enterOpacitys(enterOpacity) {
  if (enterOpacity !== undefined) {
    return enterOpacity;
  } else {
    return "0.8";
  }
}

function downOpacitys(downOpacity) {
  if (downOpacity !== undefined) {
    return downOpacity;
  } else {
    return "0.6";
  }
}

function strokes(stroke) {
  if (stroke !== undefined) {
    return stroke;
  } else {
    return "rgba(0,0,0,1)";
  }
}

function strokeWidths(strokeWidth) {
  if (strokeWidth !== undefined) {
    return strokeWidth;
  } else {
    return "2";
  }
}

function BarPillar(Props) {
  var style = Props.style;
  var width = Props.width;
  var height = Props.height;
  var color = Props.color;
  var enterOpacity = Props.enterOpacity;
  var downOpacity = Props.downOpacity;
  var stroke = Props.stroke;
  var strokeWidth = Props.strokeWidth;
  var x = Props.x;
  var y = Props.y;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.enter;
  var match$2 = state.down;
  var tmp = {
    style: Object.assign(({}), {
          cursor: "pointer",
          height: sizes(height),
          width: sizes(width)
        }, Setting$BtsCore.styleObjects(style)),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      }),
    fill: color !== undefined ? color : "rgba(255,0,0,1)",
    fillOpacity: match$1 ? (
        match$2 ? (
            downOpacity !== undefined ? downOpacity : "0.6"
          ) : (
            enterOpacity !== undefined ? enterOpacity : "0.8"
          )
      ) : "1",
    stroke: stroke !== undefined ? stroke : "rgba(0,0,0,1)",
    strokeWidth: strokeWidth !== undefined ? strokeWidth : "2",
    x: x,
    y: y
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("g", { }, React.createElement("rect", tmp, children));
}

var make = BarPillar;

export {
  reducer ,
  initialState ,
  sizes ,
  colors ,
  enterOpacitys ,
  downOpacitys ,
  strokes ,
  strokeWidths ,
  make ,
  
}
/* react Not a pure module */
