// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Tabs/tab.scss')));

function reducer(param, action) {
  if (action) {
    return {
            down: action[0]
          };
  } else {
    return {
            down: false
          };
  }
}

var initialState = {
  down: false
};

function tabOpacitys(showTab) {
  if (showTab) {
    return "1";
  } else {
    return "0.8";
  }
}

function maxWidths(maxWidth) {
  if (maxWidth !== undefined) {
    return maxWidth + "px";
  } else {
    return "264px";
  }
}

function heights(height) {
  if (height !== undefined) {
    return height + "px";
  } else {
    return "55px";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(255,255,255,1)";
  }
}

function paddingTopBottoms(topBottom) {
  if (topBottom !== undefined) {
    return topBottom + "px";
  } else {
    return "6px";
  }
}

function paddingRightLefts(rightLeft) {
  if (rightLeft !== undefined) {
    return rightLeft + "px";
  } else {
    return "12px";
  }
}

function borderRadiuses(borderRadius) {
  if (borderRadius !== undefined) {
    return borderRadius + "px";
  } else {
    return "0px";
  }
}

function animationNames(animationName) {
  if (animationName !== undefined) {
    return animationName;
  } else {
    return "pinkWaveAnimation";
  }
}

function animationDurations(animationDuration) {
  if (animationDuration !== undefined) {
    return animationDuration;
  } else {
    return "0.3s";
  }
}

function animationTimingFunctions(animationTimingFunction) {
  if (animationTimingFunction !== undefined) {
    return animationTimingFunction;
  } else {
    return "linear";
  }
}

function animationFillModes(animationFillMode) {
  if (animationFillMode !== undefined) {
    return animationFillMode;
  } else {
    return "forwards";
  }
}

function Tab(Props) {
  var showTab = Props.showTab;
  var style = Props.style;
  var maxWidth = Props.maxWidth;
  var height = Props.height;
  var color = Props.color;
  var top = Props.top;
  var right = Props.right;
  var bottom = Props.bottom;
  var left = Props.left;
  var borderRadius = Props.borderRadius;
  var id = Props.id;
  var animationName = Props.animationName;
  var animationDuration = Props.animationDuration;
  var animationTimingFunction = Props.animationTimingFunction;
  var animationFillMode = Props.animationFillMode;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var showTab$1 = Setting$BtsCore.disabledObjects(showTab);
  var tmp = {
    className: "ji48r2t MuiButtonBase-root MuiTab-root MuiTab-textColorInherit",
    id: id,
    role: "tab",
    style: Object.assign(({}), {
          color: color !== undefined ? color : "rgba(255,255,255,1)",
          height: heights(height),
          maxWidth: maxWidths(maxWidth),
          paddingTop: paddingTopBottoms(top),
          paddingRight: paddingRightLefts(right),
          paddingBottom: paddingTopBottoms(bottom),
          paddingLeft: paddingRightLefts(left),
          opacity: showTab$1 ? "1" : "0.8",
          borderRadius: borderRadiuses(borderRadius)
        }, Setting$BtsCore.styleObjects(style)),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */[true]);
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */0);
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */[false]);
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  var match$1 = Setting$BtsCore.disabledObjects(showTab);
  var match$2 = match[0].down;
  return React.createElement("button", tmp, React.createElement("span", {
                  className: "MuiTab-wrapper"
                }, children), React.createElement("span", {
                  className: "MuiTouchRipple-root",
                  style: {
                    animationDuration: animationDuration !== undefined ? animationDuration : "0.3s",
                    animationFillMode: animationFillMode !== undefined ? animationFillMode : "forwards",
                    animationName: match$1 ? (
                        match$2 ? (
                            animationName !== undefined ? animationName : "pinkWaveAnimation"
                          ) : ""
                      ) : (
                        match$2 ? "grayWaveAnimation" : ""
                      ),
                    animationTimingFunction: animationTimingFunction !== undefined ? animationTimingFunction : "linear"
                  }
                }));
}

var make = Tab;

export {
  reducer ,
  initialState ,
  tabOpacitys ,
  maxWidths ,
  heights ,
  colors ,
  paddingTopBottoms ,
  paddingRightLefts ,
  borderRadiuses ,
  animationNames ,
  animationDurations ,
  animationTimingFunctions ,
  animationFillModes ,
  make ,
  
}
/*  Not a pure module */
