// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Navigation/navigationAction.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function disabledBackgroundColors(disabledBackgroundColor) {
  if (disabledBackgroundColor !== undefined) {
    return disabledBackgroundColor;
  } else {
    return "transparent";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "rgba(255,255,255,1)";
  }
}

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "#2196f3";
  }
}

function stillColors(stillColor) {
  if (stillColor !== undefined) {
    return stillColor;
  } else {
    return "rgba(0,0,0,0.54)";
  }
}

function paddingTops(showAction) {
  if (showAction) {
    return "6px";
  } else {
    return "16px";
  }
}

function cursors(disabled) {
  if (disabled) {
    return "no-drop";
  } else {
    return "pointer";
  }
}

function actionClass(showAction) {
  if (showAction) {
    return "j9jzp64 j1kms6th";
  } else {
    return "j9jzp64 j1rdad3f";
  }
}

function animationNames(animationName) {
  if (animationName !== undefined) {
    return animationName;
  } else {
    return "blueWaveAnimation";
  }
}

function animationDurations(animationDuration) {
  if (animationDuration !== undefined) {
    return animationDuration;
  } else {
    return "0.3s";
  }
}

function animationTimingFunctions(animationTimingFunction) {
  if (animationTimingFunction !== undefined) {
    return animationTimingFunction;
  } else {
    return "linear";
  }
}

function animationFillModes(animationFillMode) {
  if (animationFillMode !== undefined) {
    return animationFillMode;
  } else {
    return "forwards";
  }
}

function NavigationAction(Props) {
  var style = Props.style;
  var showAction = Props.showAction;
  var disabledBackgroundColor = Props.disabledBackgroundColor;
  var enterBackgroundColor = Props.enterBackgroundColor;
  var backgroundColor = Props.backgroundColor;
  var color = Props.color;
  var stillColor = Props.stillColor;
  var animationName = Props.animationName;
  var animationDuration = Props.animationDuration;
  var animationTimingFunction = Props.animationTimingFunction;
  var animationFillMode = Props.animationFillMode;
  var disabled = Props.disabled;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = Setting$BtsCore.disabledObjects(disabled);
  var match$2 = state.enter;
  var disabled$1 = Setting$BtsCore.disabledObjects(disabled);
  var showAction$1 = Setting$BtsCore.disabledObjects(showAction);
  var tmp = {
    className: "jr0u89w ji48r2j",
    style: Object.assign(({}), {
          backgroundColor: match$1 ? (
              disabledBackgroundColor !== undefined ? disabledBackgroundColor : "transparent"
            ) : (
              match$2 ? (
                  enterBackgroundColor !== undefined ? enterBackgroundColor : "rgba(255,255,255,1)"
                ) : (
                  backgroundColor !== undefined ? backgroundColor : "rgba(255,255,255,1)"
                )
            ),
          color: Setting$BtsCore.disabledObjects(showAction) ? (
              color !== undefined ? color : "#2196f3"
            ) : (
              stillColor !== undefined ? stillColor : "rgba(0,0,0,0.54)"
            ),
          cursor: disabled$1 ? "no-drop" : "pointer",
          paddingTop: showAction$1 ? "6px" : "16px"
        }, Setting$BtsCore.styleObjects(style)),
    disabled: Setting$BtsCore.disabledObjects(disabled),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  var match$3 = Setting$BtsCore.disabledObjects(showAction);
  var match$4 = state.down;
  return React.createElement("button", tmp, React.createElement("span", {
                  className: "j4q78u6 j4q78u6zi"
                }, children[0], React.createElement("span", {
                      className: actionClass(Setting$BtsCore.disabledObjects(showAction))
                    }, children[1])), React.createElement("span", {
                  className: "jb3bkca",
                  style: {
                    animationDuration: animationDuration !== undefined ? animationDuration : "0.3s",
                    animationFillMode: animationFillMode !== undefined ? animationFillMode : "forwards",
                    animationName: match$3 ? (
                        match$4 ? (
                            animationName !== undefined ? animationName : "blueWaveAnimation"
                          ) : ""
                      ) : (
                        match$4 ? "grayWaveAnimation" : ""
                      ),
                    animationTimingFunction: animationTimingFunction !== undefined ? animationTimingFunction : "linear"
                  }
                }));
}

var make = NavigationAction;

export {
  reducer ,
  initialState ,
  disabledBackgroundColors ,
  backgroundColors ,
  colors ,
  stillColors ,
  paddingTops ,
  cursors ,
  actionClass ,
  animationNames ,
  animationDurations ,
  animationTimingFunctions ,
  animationFillModes ,
  make ,
  
}
/*  Not a pure module */
