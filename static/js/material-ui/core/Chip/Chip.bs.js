// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Chip/chip.scss')));

function reducer(state, action) {
  switch (action.tag | 0) {
    case /* MouseEnterLeave */0 :
        var enter = action[0];
        return {
                enter: enter,
                down: enter ? state.down : false,
                enterButn: state.enterButn,
                downButn: state.downButn
              };
    case /* MouseUpDown */1 :
        return {
                enter: state.enter,
                down: action[0],
                enterButn: state.enterButn,
                downButn: state.downButn
              };
    case /* MouseEnterLeaveButn */2 :
        var enterButn = action[0];
        return {
                enter: state.enter,
                down: state.down,
                enterButn: enterButn,
                downButn: enterButn ? state.downButn : false
              };
    case /* MouseUpDownButn */3 :
        return {
                enter: state.enter,
                down: state.down,
                enterButn: state.enterButn,
                downButn: action[0]
              };
    
  }
}

var initialState = {
  enter: false,
  down: false,
  enterButn: false,
  downButn: false
};

function paddings(margin) {
  if (margin !== undefined) {
    return margin + "px";
  } else {
    return "8px";
  }
}

function borderWidths(borderWidth) {
  if (borderWidth !== undefined) {
    return borderWidth + "px";
  } else {
    return "1px";
  }
}

function borderStyles(borderStyle) {
  if (borderStyle !== undefined) {
    return borderStyle;
  } else {
    return "solid";
  }
}

function borderColors(borderColor) {
  if (borderColor !== undefined) {
    return borderColor;
  } else {
    return "rgba(0,0,0,0.23)";
  }
}

function borderRadiuses(borderRadius) {
  if (borderRadius !== undefined) {
    return borderRadius + "px";
  } else {
    return "16px";
  }
}

function disabledBackgroundColors(disabledBackgroundColor) {
  if (disabledBackgroundColor !== undefined) {
    return disabledBackgroundColor;
  } else {
    return "rgba(102,102,102,0.8)";
  }
}

function otherBackgroundColors(otherBackgroundColor) {
  if (otherBackgroundColor !== undefined) {
    return otherBackgroundColor;
  } else {
    return "rgba(0,0,0,0.08)";
  }
}

function backgroundColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "transparent";
  }
}

function Chip(Props) {
  var style = Props.style;
  var top = Props.top;
  var right = Props.right;
  var bottom = Props.bottom;
  var left = Props.left;
  var enterBorderWidth = Props.enterBorderWidth;
  var downBorderWidth = Props.downBorderWidth;
  var borderWidth = Props.borderWidth;
  var enterBorderStyle = Props.enterBorderStyle;
  var downBorderStyle = Props.downBorderStyle;
  var borderStyle = Props.borderStyle;
  var enterBorderColor = Props.enterBorderColor;
  var downBorderColor = Props.downBorderColor;
  var borderColor = Props.borderColor;
  var enterBorderRadius = Props.enterBorderRadius;
  var downBorderRadius = Props.downBorderRadius;
  var borderRadius = Props.borderRadius;
  var enterBackgroundColor = Props.enterBackgroundColor;
  var downBackgroundColor = Props.downBackgroundColor;
  var backgroundColor = Props.backgroundColor;
  var onClick = Props.onClick;
  var showButn = Props.showButn;
  var disabledButnBackgroundColor = Props.disabledButnBackgroundColor;
  var enterButnBackgroundColor = Props.enterButnBackgroundColor;
  var downButnBackgroundColor = Props.downButnBackgroundColor;
  var butnBackgroundColor = Props.butnBackgroundColor;
  var disabled = Props.disabled;
  var src = Props.src;
  var onButton = Props.onButton;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.enter;
  var match$2 = state.down;
  var match$3 = state.enter;
  var match$4 = state.down;
  var match$5 = state.enter;
  var match$6 = state.down;
  var match$7 = state.enter;
  var match$8 = state.down;
  var match$9 = state.enter;
  var match$10 = state.down;
  var tmp = {
    className: "j8nrp8lcp juyseni",
    role: "button",
    style: Object.assign(({}), {
          backgroundColor: match$1 ? (
              match$2 ? (
                  downBackgroundColor !== undefined ? downBackgroundColor : "rgba(0,0,0,0.08)"
                ) : (
                  enterBackgroundColor !== undefined ? enterBackgroundColor : "rgba(0,0,0,0.08)"
                )
            ) : (
              backgroundColor !== undefined ? backgroundColor : "transparent"
            ),
          borderColor: match$3 ? (
              match$4 ? (
                  downBorderColor !== undefined ? downBorderColor : "rgba(0,0,0,0.23)"
                ) : (
                  enterBorderColor !== undefined ? enterBorderColor : "rgba(0,0,0,0.23)"
                )
            ) : (
              borderColor !== undefined ? borderColor : "rgba(0,0,0,0.23)"
            ),
          borderStyle: match$5 ? (
              match$6 ? (
                  downBorderStyle !== undefined ? downBorderStyle : "solid"
                ) : (
                  enterBorderStyle !== undefined ? enterBorderStyle : "solid"
                )
            ) : (
              borderStyle !== undefined ? borderStyle : "solid"
            ),
          borderWidth: match$7 ? (
              match$8 ? borderWidths(downBorderWidth) : borderWidths(enterBorderWidth)
            ) : borderWidths(borderWidth),
          paddingTop: paddings(top),
          paddingRight: paddings(right),
          paddingBottom: paddings(bottom),
          paddingLeft: paddings(left),
          borderRadius: match$9 ? (
              match$10 ? borderRadiuses(downBorderRadius) : borderRadiuses(enterBorderRadius)
            ) : borderRadiuses(borderRadius)
        }, Setting$BtsCore.styleObjects(style)),
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  var tmp$1;
  if (Setting$BtsCore.disabledObjects(showButn)) {
    var match$11 = Setting$BtsCore.disabledObjects(disabled);
    var match$12 = state.enterButn;
    var match$13 = state.downButn;
    var tmp$2 = {
      className: "j2dfb39 j2dfspan",
      style: {
        backgroundColor: match$11 ? (
            disabledButnBackgroundColor !== undefined ? disabledButnBackgroundColor : "rgba(102,102,102,0.8)"
          ) : (
            match$12 ? (
                match$13 ? (
                    downButnBackgroundColor !== undefined ? downButnBackgroundColor : "rgba(0,0,0,0.08)"
                  ) : (
                    enterButnBackgroundColor !== undefined ? enterButnBackgroundColor : "rgba(0,0,0,0.08)"
                  )
              ) : (
                butnBackgroundColor !== undefined ? butnBackgroundColor : "transparent"
              )
          )
      },
      disabled: Setting$BtsCore.disabledObjects(disabled),
      onMouseDown: (function (param) {
          return Curry._1(dispatch, /* MouseUpDownButn */Block.__(3, [true]));
        }),
      onMouseEnter: (function (param) {
          return Curry._1(dispatch, /* MouseEnterLeaveButn */Block.__(2, [true]));
        }),
      onMouseLeave: (function (param) {
          return Curry._1(dispatch, /* MouseEnterLeaveButn */Block.__(2, [false]));
        }),
      onMouseUp: (function (param) {
          return Curry._1(dispatch, /* MouseUpDownButn */Block.__(3, [false]));
        })
    };
    if (onButton !== undefined) {
      tmp$2.onClick = Caml_option.valFromOption(onButton);
    }
    tmp$1 = React.createElement("span", tmp$2, React.createElement("img", {
              style: {
                display: "block",
                height: "24px",
                width: "24px"
              },
              src: Setting$BtsCore.stringObjects(src)
            }));
  } else {
    tmp$1 = null;
  }
  return React.createElement("div", tmp, React.createElement("div", {
                  className: "j8nrp8lcts j1s4s3te"
                }, React.createElement("div", {
                      className: "j4f2n9ip ja16k5a j8idkay"
                    }, children[0]), React.createElement("span", {
                      className: "j1ffzryl"
                    }, children[1])), tmp$1);
}

var make = Chip;

export {
  reducer ,
  initialState ,
  paddings ,
  borderWidths ,
  borderStyles ,
  borderColors ,
  borderRadiuses ,
  disabledBackgroundColors ,
  otherBackgroundColors ,
  backgroundColors ,
  make ,
  
}
/*  Not a pure module */
