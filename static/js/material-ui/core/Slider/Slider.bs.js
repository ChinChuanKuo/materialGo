// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Slider/slider.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function colors(color) {
  if (color !== undefined) {
    return color;
  } else {
    return "rgba(255,0,0,0.8)";
  }
}

function lefts(left) {
  if (left !== undefined) {
    return left + "%";
  } else {
    return "0%";
  }
}

function values(value) {
  if (value !== undefined) {
    return value;
  } else {
    return "0";
  }
}

function classes(overShow) {
  var basic = "MuiSlider-mark";
  if (overShow) {
    return "MuiSlider-mark MuiSlider-markActive";
  } else {
    return basic;
  }
}

function fontColors(fontColor) {
  if (fontColor !== undefined) {
    return fontColor;
  } else {
    return "rgba(255,255,255,1)";
  }
}

function Slider(Props) {
  var min = Props.min;
  var max = Props.max;
  var step = Props.step;
  var style = Props.style;
  var color = Props.color;
  var value = Props.value;
  var fontColor = Props.fontColor;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var steps = Caml_format.caml_int_of_string(value !== undefined ? value : "0");
  var items = Caml_array.caml_make_vect(Caml_int32.div(Setting$BtsCore.intObjects(max), Setting$BtsCore.intObjects(step)), 0);
  for(var x = Caml_int32.div(Setting$BtsCore.intObjects(min), Setting$BtsCore.intObjects(step)) - 1 | 0 ,x_finish = Caml_int32.div(Setting$BtsCore.intObjects(max), Setting$BtsCore.intObjects(step)); x < x_finish; ++x){
    Caml_array.caml_array_set(items, x, Caml_int32.imul(x, Setting$BtsCore.intObjects(step)));
  }
  var match$1 = state.enter;
  var match$2 = state.down;
  return React.createElement("span", {
              className: "MuiSlider-root",
              style: {
                color: color !== undefined ? color : "rgba(255,0,0,0.8)"
              }
            }, React.createElement("span", {
                  className: "MuiSlider-rail",
                  style: Setting$BtsCore.styleObjects(style)
                }), React.createElement("span", {
                  className: "MuiSlider-track",
                  style: {
                    left: "0%",
                    width: lefts(value)
                  }
                }), React.createElement("input", {
                  type: "hidden",
                  value: value !== undefined ? value : "0"
                }), $$Array.map((function (item) {
                    return React.createElement("span", {
                                className: classes(item < steps),
                                style: {
                                  left: String(item) + "%"
                                }
                              });
                  }), items), React.createElement("span", {
                  className: "MuiSlider-markLabel",
                  style: {
                    left: lefts(value)
                  }
                }), React.createElement("span", {
                  className: "MuiSlider-thumb",
                  role: "slider",
                  style: {
                    cursor: "pointer",
                    left: lefts(value),
                    boxShadow: match$1 ? (
                        match$2 ? "0px 0px 0px 14px rgba(144, 202, 249, 0.16)" : "0px 0px 0px 10px rgba(144, 202, 249, 0.16)"
                      ) : ""
                  },
                  onMouseDown: (function (param) {
                      return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
                    }),
                  onMouseEnter: (function (param) {
                      return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
                    }),
                  onMouseLeave: (function (param) {
                      return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
                    }),
                  onMouseUp: (function (param) {
                      return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
                    })
                }, React.createElement("span", {
                      className: "jss867",
                      style: {
                        transform: state.enter ? "scale(1) translateY(-10px)" : ""
                      }
                    }, React.createElement("span", {
                          className: "jss868"
                        }, React.createElement("span", {
                              className: "jss869",
                              style: {
                                color: fontColor !== undefined ? fontColor : "rgba(255,255,255,1)"
                              }
                            }, value !== undefined ? value : "0")))));
}

var make = Slider;

export {
  reducer ,
  initialState ,
  colors ,
  lefts ,
  values ,
  classes ,
  fontColors ,
  make ,
  
}
/*  Not a pure module */
