// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Setting$BtsCore from "../../../setting/Setting.bs.js";

((require('../../scss/Switch/switch.scss')));

function reducer(state, action) {
  if (action.tag) {
    return {
            enter: state.enter,
            down: action[0]
          };
  }
  var enter = action[0];
  return {
          enter: enter,
          down: enter ? state.down : false
        };
}

var initialState = {
  enter: false,
  down: false
};

function marginRights(right) {
  if (right !== undefined) {
    return right + "px";
  } else {
    return "16px";
  }
}

function marginLefts(left) {
  if (left !== undefined) {
    return left + "px";
  } else {
    return "-14px";
  }
}

function paddings(padding) {
  if (padding !== undefined) {
    return padding + "px";
  } else {
    return "0px";
  }
}

function transforms(checked) {
  if (checked) {
    return "translateX(14px)";
  } else {
    return "translateX(0px)";
  }
}

function circleColors(backgroundColor) {
  if (backgroundColor !== undefined) {
    return backgroundColor;
  } else {
    return "rgba(255,0,0,0.8)";
  }
}

function downBoxShadows(downBoxShadow) {
  if (downBoxShadow !== undefined) {
    return downBoxShadow;
  } else {
    return "0px 0px 0px 12px rgba(0,0,0,0.16)";
  }
}

function boxShadows(boxShadow) {
  if (boxShadow !== undefined) {
    return boxShadow;
  } else {
    return "0px 0px 0px 8px rgba(0,0,0,0.16)";
  }
}

function linearColors(linearColor) {
  if (linearColor !== undefined) {
    return linearColor;
  } else {
    return "rgba(0,0,0,0.38)";
  }
}

function disabledFontColors(disabledFontColor) {
  if (disabledFontColor !== undefined) {
    return disabledFontColor;
  } else {
    return "rgba(0,0,0,0.26)";
  }
}

function fontColors(fontColor) {
  if (fontColor !== undefined) {
    return fontColor;
  } else {
    return "rgba(0,0,0,1)";
  }
}

function Switch(Props) {
  var style = Props.style;
  var right = Props.right;
  var left = Props.left;
  var checked = Props.checked;
  var padding = Props.padding;
  var circleColor = Props.circleColor;
  var checkBoxShadow = Props.checkBoxShadow;
  var enterBoxShadow = Props.enterBoxShadow;
  var downBoxShadow = Props.downBoxShadow;
  var linearColor = Props.linearColor;
  var disabledFontColor = Props.disabledFontColor;
  var fontColor = Props.fontColor;
  var disabled = Props.disabled;
  var onClick = Props.onClick;
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var checked$1 = Setting$BtsCore.disabledObjects(checked);
  var match$1 = Setting$BtsCore.disabledObjects(disabled);
  var match$2 = Setting$BtsCore.disabledObjects(checked);
  var match$3 = state.enter;
  var match$4 = state.down;
  var tmp = {
    className: "j9ixv80",
    checked: Setting$BtsCore.disabledObjects(checked),
    disabled: Setting$BtsCore.disabledObjects(disabled),
    type: "checkbox",
    onMouseDown: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [true]));
      }),
    onMouseEnter: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [true]));
      }),
    onMouseLeave: (function (param) {
        return Curry._1(dispatch, /* MouseEnterLeave */Block.__(0, [false]));
      }),
    onMouseUp: (function (param) {
        return Curry._1(dispatch, /* MouseUpDown */Block.__(1, [false]));
      })
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("label", {
              className: "j14cdvo3",
              style: {
                marginRight: marginRights(right),
                marginLeft: marginLefts(left)
              }
            }, React.createElement("span", {
                  className: "j1p4uln4"
                }, React.createElement("span", {
                      className: "jr0u89w j1g2vga5 j15rg1tn jtb5zs6 j1nv0zgm",
                      style: {
                        padding: paddings(padding),
                        transform: checked$1 ? "translateX(14px)" : "translateX(0px)"
                      }
                    }, React.createElement("span", {
                          className: "jsbmc5e"
                        }, React.createElement("span", {
                              className: "jxselqx",
                              style: Object.assign(({}), {
                                    backgroundColor: circleColor !== undefined ? circleColor : "rgba(255,0,0,0.8)",
                                    boxShadow: match$1 ? "" : (
                                        match$2 ? (
                                            match$3 ? (
                                                match$4 ? (
                                                    downBoxShadow !== undefined ? downBoxShadow : "0px 0px 0px 12px rgba(0,0,0,0.16)"
                                                  ) : (
                                                    checkBoxShadow !== undefined ? checkBoxShadow : "0px 0px 0px 8px rgba(0,0,0,0.16)"
                                                  )
                                              ) : ""
                                          ) : (
                                            match$3 ? (
                                                match$4 ? (
                                                    downBoxShadow !== undefined ? downBoxShadow : "0px 0px 0px 12px rgba(0,0,0,0.16)"
                                                  ) : (
                                                    enterBoxShadow !== undefined ? enterBoxShadow : "0px 0px 0px 8px rgba(0,0,0,0.16)"
                                                  )
                                              ) : ""
                                          )
                                      )
                                  }, Setting$BtsCore.styleObjects(style))
                            }), React.createElement("input", tmp)), React.createElement("span", {
                          className: "jb3bkca"
                        })), React.createElement("span", {
                      className: "ju2cry8",
                      style: {
                        backgroundColor: linearColor !== undefined ? linearColor : "rgba(0,0,0,0.38)"
                      }
                    })), React.createElement("span", {
                  className: "j59oks2 j1n0vc23",
                  style: {
                    color: Setting$BtsCore.disabledObjects(disabled) ? (
                        disabledFontColor !== undefined ? disabledFontColor : "rgba(0,0,0,0.26)"
                      ) : (
                        fontColor !== undefined ? fontColor : "rgba(0,0,0,1)"
                      )
                  }
                }, children));
}

var make = Switch;

export {
  reducer ,
  initialState ,
  marginRights ,
  marginLefts ,
  paddings ,
  transforms ,
  circleColors ,
  downBoxShadows ,
  boxShadows ,
  linearColors ,
  disabledFontColors ,
  fontColors ,
  make ,
  
}
/*  Not a pure module */
